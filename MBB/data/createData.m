function  createData()
GAVETestData.data1.description = ...
    "This data is derived from Example 4.2 of reference: " + ...
    "Modified newton-type iteration methods " + ...
    "for generalized absolute value equations, " + ...
    "which describes the LCP(q, M): " + ...
    "determining z s.t.\n" + ...
    "   - Mz + q >= 0\n" + ...
    "   - z >= 0 \n" + ...
    "   - <z,Mz+q> = 0\n" + ...
    "where \n" + ...
    "   - M = \\hat{M} + u*I\n" + ...
    "   - \\hat{M} = tridiag(−I, S, −I)\n" + ...
    "   - S = tridiag(−1, 4, −1)\n" + ...
    "   - q = -M*z\n" + ...
    "   - z = (1.2, 1.2, ··· , 1.2, ···)^T\n" + ...
    "In this data, u = 4.\n" + ...
    "In order to " + ...
    "convert GAVE(Ax+B|x|=b) data, You need the following steps: \n" + ...
    "   1. w = |x|+x, z = |x|-x\n" + ...
    "   2. A = I + M, B = I - M\n" + ...
    "   3. b=q\n";
GAVETestData.data1.size_3600 = test1(60);
GAVETestData.data1.size_4900 = test1(70);
GAVETestData.data1.size_6400 = test1(80);
GAVETestData.data1.size_8100 = test1(90);
GAVETestData.data1.size_10000 = test1(100);
%%
GAVETestData.data2.description = ...
    "This data is derived from Example 4.2 of reference: " + ...
    "Modified newton-type iteration methods " + ...
    "for generalized absolute value equations, " + ...
    "which describes the LCP(q, M): " + ...
    "determining z s.t.\n" + ...
    "   - Mz + q >= 0\n" + ...
    "   - z >= 0 \n" + ...
    "   - <z,Mz+q> = 0\n" + ...
    "where \n" + ...
    "   - M = \\hat{M} + u*I\n" + ...
    "   - \\hat{M} = tridiag(−1.5I, S, −0.5I)\n" + ...
    "   - S = tridiag(−1.5, 4, −0.5)\n" + ...
    "   - q = -M*z\n" + ...
    "   - z = (1.2, 1.2, ··· , 1.2, ···)^T\n" + ...
    "In this data, u = 4.\n" + ...
    "In order to " + ...
    "convert GAVE(Ax+B|x|=b) data, You need the following steps: \n" + ...
    "   1. w = |x|+x, z = |x|-x\n" + ...
    "   2. A = I + M, B = I - M\n" + ...
    "   3. b=q\n";
GAVETestData.data2.size_3600 = test2(60);
GAVETestData.data2.size_4900 = test2(70);
GAVETestData.data2.size_6400 = test2(80);
GAVETestData.data2.size_8100 = test2(90);
GAVETestData.data2.size_10000 = test2(100);
%%
GAVETestData.data3.size_3600 = test3(3600);
GAVETestData.data3.size_4900 = test3(4900);
GAVETestData.data3.size_6400 = test3(6400);
GAVETestData.data3.size_8100 = test3(8100);
GAVETestData.data3.size_10000 = test3(10000);
save('..\data', 'GAVETestData')
end
function data = test1(m)
%m: 分块矩阵的阶数和个数
u = 4;
z_star = 1.2*ones(m^2,1);

I_min = eye(m);
S = diag(4*ones(m,1)) - diag(ones(m-1,1),1) - diag(ones(m-1,1),-1);
M_hat = kron(diag(ones(1,m-1),1)+diag(ones(1,m-1),-1), -I_min) + kron(diag(ones(1,m)), S);
I = eye(m^2);
M = M_hat + u*I;

A = sparse(M + I);
B = sparse(I - M);
b = -M * z_star;
data.A = A;
data.B = B;
data.b = b;
end

function data = test2(m)
%m: 分块矩阵的阶数和个数
u = 4;
z_star = 1.2*ones(m^2,1);

I_min = eye(m);
S = diag(4*ones(m,1)) - 0.5*diag(ones(m-1,1),1) - 1.5*diag(ones(m-1,1),-1);
M_hat = kron(diag(ones(1,m-1),1), -0.5*I_min) +...
        kron(diag(ones(1,m-1),-1), -1.5*I_min) +...
        kron(diag(ones(1,m)), S);
I = eye(m^2);
M = M_hat + u*I;

A = sparse(M + I);
B = sparse(I - M);
b = -M * z_star;
data.A = A;
data.B = B;
data.b = b;
end

function data = test3(n)
%n: 分块矩阵的阶数和个数
tau = 1;

M = (1+2*tau)*diag(ones(n,1))...
    -tau*diag(ones(n-1,1),-1) + ...
    -tau*diag(ones(n-1,1),1);
z_star = arrayfun(@(n) 1/2*(1+(-1)^(n+1)),(1:n)');
g = 0.5*z_star;
w_star = arrayfun(@(n) 1/2*(1+(-1)^(n)),(1:n)');
q = M*z_star - w_star;
I = eye(n);

A = sparse(M+I);
B = sparse(I-M);
b = M*g - q;
data.A = A;
data.B = B;
data.b = b;
end
